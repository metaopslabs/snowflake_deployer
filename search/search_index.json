{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Snowflake Deployer","text":"<p>DataOps python framework for managing Snowflake environment. </p> <p>All code stored in source control &amp; deployed directly to Snowflake.  </p>"},{"location":"#reason-for-this-project","title":"Reason for this project","text":"<p>There's 2 primary automated deployment methods for data warehouses.  Terraform &amp; Migration based tools (schemachange, flyway, etc).</p>"},{"location":"#why-terraform-is-not-ideal","title":"Why Terraform is not ideal","text":"<p>Terraform is fantastic for slowly changing infastructure projects like aws cloud infrastructure deployments that have a single location for managing changes.  Data warehouse changes have a much higher number of changes and often need to come from different applications.  Some objects are managed by the replication tool, others by the transformation tool and others by the meta data management tool.  Terraform simply wasn't meant to manage a complex environment like this.  Given the \"state\" is stored in a seperate state file, state drift becomes a real problem with data warehousing and troubleshooting state drift is an extremely time consuming task.</p>"},{"location":"#why-migration-tools-are-not-ideal","title":"Why Migration tools are not ideal","text":"<p>Because of the issues with Terraform, most companies turn to migration based tools.  The problem here is scale as every statement needs to be written out in SQL, and every update needs an ALTER statement.  This quickly becomes impossible to determine the state of any object at any one time.  Some work arounds can be done with using CREATE or REPLACE statements, but this only goes so far as constanly replacing objects leads to issues with governance policies &amp; tags, time travel, and dependencies. </p>"},{"location":"#best-of-both-worlds","title":"Best of both worlds","text":"<p>The snowflake-deployer uses the best of worlds.  A yml state based config files for each object with the flexibility that migration based tools give.  </p>"},{"location":"#creates-and-alters","title":"CREATES and ALTERS","text":"<p>The snowflake-deployer converts the yml config into CREATE or ALTER statements based on current objects within the database.</p>"},{"location":"#file-hash-object-hash","title":"File Hash &amp; Object Hash","text":"<p>File hashes and object hashes are both store and calculated at run time.  So if either a file changed or an object changed from another application (ie. FiveTran loading a table and adding a column or a transformation removing tags), the deployer will detect that the object needs to be updated.  This also allows the deployment to ignore objects that match the config file to prevent every object to be deployed on every run.</p>"},{"location":"#deploy-import","title":"Deploy &amp; Import","text":"<p>The Snowflake Deployer includes both a \"deployer\" for pushing yaml config to the database. As well as an \"import\" process for reverse engineering an existing database to config files.</p>"},{"location":"#deployment-tags","title":"Deployment Tags","text":"<p>Tags can specify objects only be deployed for certain environments.</p> <p>Within each object config, add the following code (list of environments to deploy to): <pre><code>DEPLOY_ENV:\n- dev\n</code></pre></p> <p>Within each environment config file, add the following code (configured environment name): <pre><code>DEPLOY_ENV: dev\n</code></pre></p>"},{"location":"#jinja-variables","title":"Jinja Variables","text":"<p>Jinja variables can be used throughout the config files for parametization and cross file depency references.</p>"},{"location":"#parametization","title":"Parametization","text":"<p>Any value in the config files can use a jinja variable for parametization by environment. </p> <p>Example:</p> <p>Object yaml - The \"COMMENT\" config references the \"my_comment\" variable. <pre><code>COMMENT: {{my_comment}}\n</code></pre></p> <p>Config - the \"deploy_config_dev.yml\" environment config file stores the value of the my_comment value. <pre><code>VARS:\n- my_comment: some dev comment\n</code></pre></p> <p>NOTE: The import process will not bring in variables (no way to reverse engineer a variable reference).  However, the import process will ignore any values that already have a variable reference.  </p>"},{"location":"#references","title":"References","text":"<p>ref - Object reference based on the naming convention of {db}{schema}{object_name}</p> <p>role - Specific role reference based on the naming convention of {role}</p> <p>Example <pre><code>TAGS:\n- {{ref('CONTROL__GOVERNANCE__ENV')}}: {{env}}\nGRANTS:\n- {{role('PROCESSING')}}: APPLY\n</code></pre></p> <p>NOTE: The import process will bring in jinja ref and role references.</p>"},{"location":"#parallelization","title":"Parallelization","text":"<p>Snowflake Deployer uses the jinja ref's to determine dependencies and creates a deployment parrallelization path.  The MAX_THREADS parameter in the environment config file controls how many active threads can be running at once.</p>"},{"location":"#commands","title":"Commands","text":"<p>Deployment - deploy config files to Snowflake based on configuration in config file <pre><code>snowflake-deploy deploy -c deploy_config_dev.yml\n</code></pre></p> <p>Import - Reverse engineer existing Snowflake account into yml config files <pre><code>snowflake-deploy deploy -c deploy_config_dev.yml\n</code></pre></p> <p>Keys - create Public/Private RSA Tokens for authentication <pre><code>snowflake-deploy keys -p Th1sI$@Pa$$w0d\n</code></pre></p>"},{"location":"#sample-project","title":"Sample Project","text":"<p>See sample project for an example structure.</p> <p>https://github.com/metaopslabs/snowflake_deploy_example/tree/main</p>"},{"location":"test/","title":"Some other page","text":"<p>For full documentation visit mkdocs.org. bla bla bla</p>"},{"location":"deployment/github_action_deploy/","title":"Github Action - Deploy","text":""},{"location":"deployment/github_action_deploy/#github-action-without-environment-config","title":"Github Action - Without Environment Config","text":"<p>Sample GitHub Action that uses action secrets with the branch name as the prefix to the secret name.</p>"},{"location":"deployment/github_action_deploy/#example-secrets","title":"Example Secrets","text":""},{"location":"deployment/github_action_deploy/#main","title":"main","text":"<ul> <li>MAIN_CONFIG_FILENAME</li> <li>MAIN_SNOWFLAKE_USERNAME</li> <li>MAIN_SNOWFLAKE_ACCOUNT</li> <li>MAIN_SNOWFLAKE_WAREHOUSE</li> <li>MAIN_SNOWFLAKE_ROLE</li> <li>MAIN_SNOWFLAKE_PRIVATE_KEY</li> <li>MAIN_SNOWFLAKE_PRIVATE_KEY_PASSWORD</li> </ul>"},{"location":"deployment/github_action_deploy/#dev","title":"dev","text":"<ul> <li>DEV_CONFIG_FILENAME</li> <li>DEV_SNOWFLAKE_USERNAME</li> <li>DEV_SNOWFLAKE_ACCOUNT</li> <li>DEV_SNOWFLAKE_WAREHOUSE</li> <li>DEV_SNOWFLAKE_ROLE</li> <li>DEV_SNOWFLAKE_PRIVATE_KEY</li> <li>DEV_SNOWFLAKE_PRIVATE_KEY_PASSWORD</li> </ul> <pre><code>name: deploy-snowflake-example\n\non:\n  push:\n    branches:\n      - main\n      - dev\n    paths:\n      - 'snowflake/**'\n  workflow_dispatch:\n\njobs:\n  # Get the branch name from the branch this is being executed against\n  # This is used to set the environment parameter in the main job to know which \n  # Alternatively this can be used as a prefix for repo's that don't utile environments but rather use prefixes on action secrets\n  set_env:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get Branch Name\n        id: branch_name\n        run: |\n          echo \"Running on branch ${{github.ref}}\"\n          echo \"::set-output name=branch_env::${GITHUB_REF#refs/heads/}\"\n    outputs:\n      env_name: ${{steps.branch_name.outputs.branch_env}}\n\n  deploy-snowflake:\n    needs: [set_env] # orchestration dependencies set_env job to execute first\n    runs-on: ubuntu-latest\n    #environment: ${{needs.set_env.outputs.env_name}}  # For enterprise accounts utilizing secrets environments\n    env:\n      ENVIRONMENT_PREFIX: ${{needs.set_env.outputs.env_name}}\n\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Setup Python 3.10.x\n        uses: actions/setup-python@v2.2.1\n        with:\n          python-version: 3.10.x\n\n      - name: run snowflake-deployer\n        env:\n          CONFIG_FILENAME: ${{secrets[format('{0}_CONFIG_FILENAME', env.ENVIRONMENT_PREFIX)]}}\n          SNOWFLAKE_USERNAME: ${{secrets[format('{0}_SNOWFLAKE_USERNAME', env.ENVIRONMENT_PREFIX)]}}\n          SNOWFLAKE_ACCOUNT: ${{secrets[format('{0}_SNOWFLAKE_ACCOUNT', env.ENVIRONMENT_PREFIX)]}}\n          SNOWFLAKE_WAREHOUSE: ${{secrets[format('{0}_SNOWFLAKE_WAREHOUSE', env.ENVIRONMENT_PREFIX)]}}\n          SNOWFLAKE_ROLE: ${{secrets[format('{0}_SNOWFLAKE_ROLE', env.ENVIRONMENT_PREFIX)]}}\n          SNOWFLAKE_PRIVATE_KEY: ${{secrets[format('{0}_SNOWFLAKE_PRIVATE_KEY', env.ENVIRONMENT_PREFIX)]}}\n          SNOWFLAKE_PRIVATE_KEY_PASSWORD: ${{secrets[format('{0}_SNOWFLAKE_PRIVATE_KEY_PASSWORD', env.ENVIRONMENT_PREFIX)]}}\n\n        run: |\n          echo \"GITHUB_WORKSPACE: $GITHUB_WORKSPACE\"\n          python --version\n          echo \"Installing snowflake-deployer\"\n          pip install snowflake-deployer\n\n          echo \"Using Config File:\"\n          echo $ENVIRONMENT_PREFIX\n          echo $CONFIG_FILENAME\n\n          echo \"Running snowflake-deployer\"\n          snowflake-deployer deploy -c $CONFIG_FILENAME\n</code></pre>"},{"location":"deployment/github_action_deploy/#github-action-with-environment-config","title":"Github Action - With Environment Config","text":"<p>Sample GitHub Action that uses environments with the name of the environment as the branch name.  Each environment contains the following secrets.</p>"},{"location":"deployment/github_action_deploy/#secrets","title":"Secrets","text":"<ul> <li>CONFIG_FILENAME</li> <li>SNOWFLAKE_USERNAME</li> <li>SNOWFLAKE_ACCOUNT</li> <li>SNOWFLAKE_WAREHOUSE</li> <li>SNOWFLAKE_ROLE</li> <li>SNOWFLAKE_PRIVATE_KEY</li> <li>SNOWFLAKE_PRIVATE_KEY_PASSWORD</li> </ul> <pre><code>name: deploy-snowflake-example\n\non:\n  push:\n    branches:\n      - main\n      - dev\n    paths:\n      - 'snowflake/**'\n  workflow_dispatch:\n\njobs:\n  # Get the branch name from the branch this is being executed against\n  # This is used to set the environment parameter in the main job to know which \n  # Alternatively this can be used as a prefix for repo's that don't utile environments but rather use prefixes on action secrets\n  set_env:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get Branch Name\n        id: branch_name\n        run: |\n          echo \"Running on branch ${{github.ref}}\"\n          echo \"::set-output name=branch_env::${GITHUB_REF#refs/heads/}\"\n    outputs:\n      env_name: ${{steps.branch_name.outputs.branch_env}}\n\n  deploy-snowflake:\n    needs: [set_env] # orchestration dependencies set_env job to execute first\n    runs-on: ubuntu-latest\n    environment: ${{needs.set_env.outputs.env_name}}  \n\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Setup Python 3.10.x\n        uses: actions/setup-python@v2.2.1\n        with:\n          python-version: 3.10.x\n\n      - name: run snowflake-deployer\n        env:\n          CONFIG_FILENAME: ${{secrets.CONFIG_FILENAME}}\n          SNOWFLAKE_USERNAME: ${{secrets.SNOWFLAKE_USERNAME}}\n          SNOWFLAKE_ACCOUNT: ${{secrets.SNOWFLAKE_ACCOUNT}}\n          SNOWFLAKE_WAREHOUSE: ${{secrets.SNOWFLAKE_WAREHOUSE}}\n          SNOWFLAKE_ROLE: ${{secrets.SNOWFLAKE_ROLE}}\n          SNOWFLAKE_PRIVATE_KEY: ${{secrets.SNOWFLAKE_PRIVATE_KEY}}\n          SNOWFLAKE_PRIVATE_KEY_PASSWORD: ${{secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD}}\n\n        run: |\n          echo \"GITHUB_WORKSPACE: $GITHUB_WORKSPACE\"\n          python --version\n          echo \"Installing snowflake-deployer\"\n          pip install snowflake-deployer\n\n          echo \"Running snowflake-deployer\"\n          snowflake-deployer deploy -c $CONFIG_FILENAME\n</code></pre>"},{"location":"set_up/config/","title":"Configuration","text":""},{"location":"set_up/config/#environment-configuration-overview","title":"Environment Configuration Overview","text":"<p>Once installed, additional environment configuration can be set up using environment specific yaml files.</p> <p>In the base folder of the database config (base working directory), create a yml file for each environment.</p> <p>For example:</p> <p>deploy_config_dev.yml deploy_config_prod.yml</p>"},{"location":"set_up/config/#referencing-a-config-file","title":"Referencing a Config File","text":"<p>There are 2 ways to tell Snowflake Deployer which config file to use during execution.</p> <p>Option 1 - Command Line Parameter</p> <p>Use the -c parameter when calling <pre><code>snowflake-deployer deploy -c \"deploy_config_dev.yml\"\n</code></pre></p> <p>Option 2 - Environment Var</p> <p>Use the environment variable DEPLOY_CONFIG_PATH.</p> <pre><code>export DEPLOY_CONFIG_PATH=\"deploy_config_dev.yml\"\n</code></pre> <p>Usage - If both the command line parameter AND environment variable are set, execution will use the command line parameter.</p>"},{"location":"set_up/config/#supported-config-parameters","title":"Supported Config Parameters","text":"Parameter Description <code>ENV_DATABASE_PREFIX</code> (String) Database Prefix within environment <ul><li>Default = \"\"</li><li>Valid Values = [\"A\",\"B\"]</li></ul> <code>ENV_WAREHOUSE_PREFIX</code> (String) Warehoue Prefix within environment <ul><li>Default = \"\"</li><li>Valid Values = [\"A\",\"B\"]</li></ul> <code>ENV_ROLE_PREFIX</code> (String) Role Prefix within environment <ul><li>Default = \"\"</li><li>Valid Values = [\"A\",\"B\"]</li></ul> <code>ENV_PROCEDURE_PREFIX</code> (String) Procedure Prefix within environment <ul><li>Default = \"\"</li><li>Valid Values = [\"A\",\"B\"]</li></ul> <code>ENV_FUNCTION_PREFIX</code> (String) Function Prefix within environment <ul><li>Default = \"\"</li><li>Valid Values = [\"A\",\"B\"]</li></ul> <code>OBJECT_METADATA_ONLY</code> (Boolean) Flag to support the creation of Tables &amp; Views or only the metadata. <ul><li>Currently deployer does not support creation of the tables and views, only the metadata, tags &amp; grants on an object</li><li>Default = True</li></ul> <code>MAX_THREADS</code> (Int) Number of threads the deployer will process in parrellel during deployment.  Balance Snowflake warehouse load with python execution environment. <ul><li>Default = 3</li></ul> <code>DEPLOY_ENV</code> (String) Name of the current environment.<ul><li>Used in conjunction with the DEPLOY_ENV list on an object.</li><li>If an object should only be deployed to certain environments, set the current environment name here, and then list the environments to deploy to within the DEPLOY_ENV config on each object.</li><li>Default = None</li></ul> <code>VARS</code> List({key:value}) A list of key value pairs of variables within an environment.<ul>Vars can be referenced as Jinja vars in any object config and will take precedence over any values returned from the reverse engineering process.<li>Default = None</li></ul> <code>HANDLE_OWNERSHIP</code> (String) How to handle the ownership of existing objects.<ul><li>For deployments in existing environments, the deployer can manage existing options.  But the DEPLOY_ROLE may not have ownership of the objects to manage. This config tells the deployer how to handle that scenario.</li><li>Default = ERROR</li><li>Valid Values = [ERROR,GRANT]</li><li>GRANT = Grant ownership role of object to DEPLOY_ROLE so the DEPLOY_ROLE inherits ownership capabilities.  Be careful of any objects that are object by ACCOUNTADMIN as this tells the deployer to make DEPLOY_ROLE the parent role to ACCOUNTADMIN</li><li>ERROR = Deployer will error out if it does not have ownership privilege on objects it's managing.  These errors will need to be fixed manually by granting ownership to a role that the DEPLOY role is a parent role to.</li></ul> <code>DEPLOY_DATABASE_NAME</code> (String) Name of the MetaOps Deploy Database.<ul><li>Only needing configuration if modified database in the Snowflake set up script.  Else exclude.</li><li>For multiple environments within a single instance, environments can reference the same deploy db</li><li>Default = \"_DEPLOY\"</li></ul> <code>DEPLOY_ROLE</code> (String) Name of the MetaOps Deploy Role.<ul><li>Only needing configuration if modified fole in the Snowflake set up script.  Else exclude.</li><li>For multiple environments within a single instance, environments can use the same role</li><li>Default = \"INSTANCEADMIN\"</li></ul> <code>IMPORT_DATABASES</code> (List) List of databases to import for subcommand = IMPORT only.  If not included, all databases imported.  List values can either include or not include the ENV_DATABASE_PREFIX.  If not included, then ENV_DATABASE_PREFIX is applied when finding databases to import. <code>IMPORT_OBJECT_TYPES</code> (List) List of object types to import for subcommand = IMPORT only.  If empty list of not included, all object types will be imported.  Valid object types:<ul><li>DATABASE</li><li>FUNCTION</li><li>MASKING POLICY</li><li>OBJECT</li><li>PROCEDURE</li><li>ROLE</li><li>ROW ACCESS POLICY</li><li>SCHEMA</li><li>TAG</li><li>TASK</li><li>WAREHOUSE</li></ul> <code>CLASSIFY_DATABASES</code> (List) List of databases to classify for subcommand = CLASSIFY only.  If not included, all databases classified.  List values can either include or not include the ENV_DATABASE_PREFIX.  If not included, then ENV_DATABASE_PREFIX is applied when finding databases to classify. <code>CLASSIFY_TAGS_DB_SCHEMA</code> (String) Database.Schema location of where governance tags to be stored for subcommand = CLASSIFY only.  Classify command auto creates necessary tags. <code>CLASSIFY_IGNORE_TAGS</code> (List) List of tags to signify that column should be ignored from classification for subcommand = CLASSIFY only. <code>CLASSIFY_MAX_SAMPLE_SIZE</code> (Int) Max sample size of Snowflake's auto-classification for subcommand = CLASSIFY only.  This helps reduce processing time of classification.  Default = 10000"},{"location":"set_up/config/#example-config","title":"Example config","text":"<p>deploy_config_dev.yml <pre><code>ENV_DATABASE_PREFIX: DEV_\nENV_WAREHOUSE_PREFIX: \nENV_ROLE_PREFIX: \nENV_PROCEDURE_PREFIX: \nENV_FUNCTION_PREFIX: \nOBJECT_METADATA_ONLY: True\nMAX_THREADS: 5\nHANDLE_OWNERSHIP: ERROR\nIMPORT_DATABASES:\n- ANALYTICS\n- CONTROL\n- RAW\n- SECURITY\nCLASSIFY_DATABASES:\n- ANALYTICS\n- RAW\nDEPLOY_ENV: dev\nVARS:\n- my_comment: some dev comment\n- another_var: some other var in dev\n</code></pre></p>"},{"location":"set_up/directory_structure/","title":"Directory Structure","text":"<p>Create a new repo &amp; open locally in VS Code.</p> <pre><code>{project-name}\n    .github/\n        - workflows/\n            - deploy-snowflake.yml\n    snowflake/\n        - account/\n            - roles/\n            - warehouses/\n        - data/\n            - {DATABASE_NAME}/\n                - {SCHEMA_NAME}/\n                    - OBJECTS/\n                    - TASKS/\n                    - PROCEDURES/\n                    - MASKING_POLICIES/\n                    - ROW_ACCESS_POLICIES/\n                    - TAGS/\n                    schema.yml\n                database.yml\n    .gitignore\n    deploy_config_dev.yml\n    deploy_config_prod.yml\n    README.md\n</code></pre> <p>Actual deployment docs will vary by environments.</p> <p>See Snowflake Objects sections for config of individual config files for each object type.</p>"},{"location":"set_up/import_existing/","title":"Import Existing Account","text":"<p>Reverse Engineer an existing Snowflake account by importing existing objects to yml config.</p> <p>Below is an example execution based on the dev configuration file named deploy_config_dev.yml</p> <pre><code>snowflake-deployer import -c deploy_config_dev.yml\n</code></pre> <p>This will build the file structure and config files based on supported objects.</p>"},{"location":"set_up/install/","title":"Initial Install","text":""},{"location":"set_up/install/#python-module-install","title":"Python Module Install","text":"<p>Install python module locally: <pre><code>python -m pip install snowflake-deployer\n</code></pre></p>"},{"location":"set_up/install/#create-rsa-tokens","title":"Create RSA Tokens","text":"<p>MetaOps Deploy comes with a RSA Token generater which uses an environment variable to encrypt.</p> <ol> <li>Create a random generated password</li> <li>Create RSA private &amp; public keys</li> </ol> <pre><code>snowflake-deployer keys -p {password key}\n</code></pre> <ol> <li>Save keys from output to a vault or secure location!</li> </ol>"},{"location":"set_up/install/#snowflake","title":"Snowflake","text":"<ol> <li>Update the RSA_PUBLIC_KEY in the below script with the PUBLIC KEY from the previous step.  Make sure to NOT include the \"-----BEGIN PUBLIC KEY-----\" or \"-----END PUBLIC KEY-----\" in the Snowflake RSA_PUBLIC_KEY value.</li> </ol> <pre><code>USE ROLE ACCOUNTADMIN;\n\n--owned by ACCOUNTADMIN to greatly limit who can alter; should be an orphan role to not automatically give admins access to the objects it creates\nCREATE ROLE IF NOT EXISTS INSTANCEADMIN; \n\nCREATE WAREHOUSE IF NOT EXISTS DEPLOY_WH WITH WAREHOUSE_SIZE = 'XSMALL' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 10 AUTO_RESUME = TRUE MIN_CLUSTER_COUNT = 1 MAX_CLUSTER_COUNT = 1 SCALING_POLICY = 'ECONOMY' COMMENT = 'Compute for deployment objects with MetaOps Deploy';\nGRANT USAGE ON WAREHOUSE DEPLOY_WH TO ROLE INSTANCEADMIN; \nGRANT OWNERSHIP ON WAREHOUSE DEPLOY_WH TO ROLE INSTANCEADMIN COPY CURRENT GRANTS;\n\nCREATE USER IF NOT EXISTS SERVICE_DEPLOY default_role = INSTANCEADMIN default_warehouse=DEPLOY_WH must_change_password = false;\nGRANT ROLE INSTANCEADMIN TO USER SERVICE_DEPLOY;\nALTER USER SERVICE_DEPLOY SET RSA_PUBLIC_KEY='&lt;update me&gt;';\n\nGRANT MANAGE GRANTS ON ACCOUNT TO ROLE INSTANCEADMIN;\nGRANT CREATE DATABASE ON ACCOUNT TO ROLE INSTANCEADMIN;\nGRANT CREATE USER ON ACCOUNT TO ROLE INSTANCEADMIN;\nGRANT CREATE ROLE ON ACCOUNT TO ROLE INSTANCEADMIN;\nGRANT CREATE WAREHOUSE ON ACCOUNT TO ROLE INSTANCEADMIN;\nGRANT APPLY MASKING POLICY ON ACCOUNT TO ROLE INSTANCEADMIN;\nGRANT EXECUTE MANAGED TASK ON ACCOUNT TO ROLE INSTANCEADMIN;\nGRANT EXECUTE TASK ON ACCOUNT TO ROLE INSTANCEADMIN;\nGRANT IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE TO ROLE INSTANCEADMIN;\n</code></pre>"},{"location":"set_up/install/#environment-variables","title":"Environment Variables","text":"<p>Store the follow environment variables.  </p> Environment Variable Description <code>SNOWFLAKE_ACCOUNT</code> <ul><li>Snowflake account - Only include the [account identifier].[region].[cloud provider]</li><li>Example: wf79437.us-central1.gcp</li></ul> <code>SNOWFLAKE_USERNAME</code> <ul><li>Service account of the deployment user in Snowflake.  Below is the default from the Snowflake set up script.  This can be updated in the script to fit the naming convention of the environment.</li><li>Default: SERVICE_DEPLOY</li></ul> <code>SNOWFLAKE_WAREHOUSE</code> <ul><li>Snowflake warehouse used to execute deployments (for statements requiring an active warehouse).  Below is the default from the Snowflake set up script. This can be updated in the script to fit the naming convention of the environment.</li><li>Default: DEPLOY_WH</li></ul> <code>SNOWFLAKE_ROLE</code> <ul><li>Snowflake role used for deployment queries.</li><li>Default: INSTANCEADMIN</li></ul> <code>SNOWFLAKE_PRIVATE_KEY_PASSWORD</code> <ul><li>The private key password described in the beginning of this section used to create the private key.  This is the same password randomly generated in created the RSA tokens.</li></ul> <code>SNOWFLAKE_PRIVATE_KEY</code> <ul><li>The private key.  This should include the \"-----BEGIN ENCRYPTED PRIVATE KEY-----\" and \"-----END ENCRYPTED PRIVATE KEY-----\" within the private key.</li></ul>"},{"location":"set_up/install/#multiple-environments","title":"Multiple Environments","text":"<p>To set up multiple environments, simply repeat these steps and store the values within your vault.  Then set up multiple environments within GitHub with seperate environment variables per github environment (or via secrets with an environment prefix).</p>"},{"location":"snowflake/objects/database/","title":"Database","text":"<p>Snowflake Docs - CREATE DATABASE</p> <p>Snowflake Docs - ALTER DATABASE</p>"},{"location":"snowflake/objects/database/#usage","title":"Usage","text":"<ul> <li>Database name = folder name of database</li> <li>Config file in \"database.yml\" within database name folder</li> </ul>"},{"location":"snowflake/objects/database/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>DATA_RETENTION_TIME_IN_DAYS</code> (Int) - Optional <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/database/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/database/#folder-structure","title":"Folder Structure","text":"<p><code>snowflake/data/[database name]/database.yml</code></p> <p>Example Structure</p> <p>snowflake/data/MY_DATABASE1/database.yml</p> <p>snowflake/data/MY_DATABASE2/database.yml</p> <p>This creates 2 databases named \"MY_DATABASE1\" and \"MY_DATABASE2\" each with their own database.yml file within their respected folder</p>"},{"location":"snowflake/objects/database/#samples","title":"Samples","text":"<p>Basic <pre><code>COMMENT: This is the comment on a database\nOWNER: INSTANCEADMIN\nDATA_RETENTION_TIME_IN_DAYS: 1\nTAGS:\n- {{ref('CONTROL__TAGS__ENV')}}: PROD\n- {{ref('CONTROL__TAGS__ZONE')}}: ANALYTICS\nGRANTS:\n- {{role('SOME_ROLE')}}: USAGE\n</code></pre></p> <p>With a deploy lock &amp; restricted deployment environments. <pre><code>COMMENT: {{var_from_env_config}}\nOWNER: INSTANCEADMIN\nDATA_RETENTION_TIME_IN_DAYS: 1\nTAGS:\n- name: {{ref('CONTROL__GOVERNANCE__ENV')}}\n  value: PROD\n- name: {{ref('CONTROL__GOVERNANCE__ZONE')}}\n  value: ANALYTICS\nGRANTS:\n- {{role('SOME_ROLE')}}: USAGE\nDEPLOY_LOCK: true\nDEPLOY_ENV:\n- PROD\n- TEST\n</code></pre></p>"},{"location":"snowflake/objects/function/","title":"Function","text":"<p>Snowflake Docs - CREATE FUNCTION</p> <p>Snowflake Docs - ALTER FUNCTION</p>"},{"location":"snowflake/objects/function/#usage","title":"Usage","text":"<ul> <li>A Function is made up of 2 parts<ul> <li>YAML Configuration</li> <li>Code with the policy itself (see next sections for supported languages and associated file extensiosn)</li> </ul> </li> <li>All masking policies must live inside a [DATABASE]/[SCHEMA]/FUNCTIONS folder and contain both a .yml file and code file with the same name.</li> <li>Object name = name of the yml config file within [DATABASE]/[SCHEMA]/FUNCTIONS folder</li> <li>In Snowflake, multiple functions can share the same name with different signatures.  Therefore, the signature with associated data types (no input names, just data types) must be include in the file name to make the file unique.  See example sections below.</li> </ul>"},{"location":"snowflake/objects/function/#supported-languages","title":"Supported Languages","text":"Language File Extension <code>SQL</code> .sql <code>JAVASCRIPT</code> .js <code>PYTHON</code> .py"},{"location":"snowflake/objects/function/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>INPUT_ARGS</code> (List[{name: datatype}]) - Optional <code>IS_SECURE</code> (Bool) - Optional <code>RETURNS</code> (String) - Optional <code>LANGUAGE</code> (String) - Optional <ul><li>Valid Values = [SQL,JAVASCRIPT,PYTHON]</li></ul> <code>NULL_HANDLING</code> (String) - Optional  <ul><li>Valid Values = [CALLED ON NULL INPUT, RETURNS NULL ON NULL INPUT, STRICT]</li></ul> <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Python Only </p> <p>| <code>IMPORTS</code>         | (List[String]) - Optional | | <code>HANDLER</code>         | (String) - Optional | | <code>RUNTIME_VERSION</code>         | (String) - Optional | | <code>PACKAGES</code>         | (List[String]) - Optional |</p> <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/function/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/function/#folder-structure","title":"Folder Structure","text":"<p>Configuration:   <code>snowflake/data/[database name]/[schema name]/FUNCTIONS/[function name].yml</code></p> <p>Code   <code>snowflake/data/[database name]/[schema name]/FUNCTIONS/[function name].[extension]</code></p> <p>Example Structure</p> <p>snowflake/data/CONTROL/CODE/FUNCTIONS/GET_FISCAL_YEARS().yml</p> <p>snowflake/data/CONTROL/CODE/FUNCTIONS/GET_FISCAL_YEARS.sql</p> <p>snowflake/data/CONTROL/CODE/FUNCTIONS/PY_PI(varchar,int).yml</p> <p>snowflake/data/CONTROL/CODE/FUNCTIONS/PY_PI(varchar,int).py</p> <p>This specifies the metadata for a sql function named \"GET_FISCAL_YEARS\" with an empty signature and a python function \"PY_PI\" with a signature of (varchar,int).  Both within the CONTROL.CODE schema, each with their own yml config file &amp; code based on the function name.</p>"},{"location":"snowflake/objects/function/#samples","title":"Samples","text":"<p>Config <pre><code>INPUT_ARGS:\n- TABLENAME: VARCHAR\n- ROLE: VARCHAR\nRETURNS: TABLE (ID NUMBER, NAME VARCHAR, ROLE VARCHAR)\nLANGUAGE: PYTHON\nOWNER: INSTANCEADMIN\nCOMMENT: \nIS_SECURE: false\nIMPORTS: \nHANDLER: filter_by_role\nRUNTIME_VERSION: 3.8\nPACKAGES: \n- snowflake-snowpark-python\nTAGS: \n- {{ref('CONTROL__GOVERNANCE__ENV')}}: {{env}}\nGRANTS: \n- {{role('SOME_ROLE')}}: USAGE\n</code></pre></p> <p>Code file (.py in this example) <pre><code>from snowflake.snowpark.functions import col\n\ndef filter_by_role(session, table_name, role):\n   df = session.table(table_name)\n   return df.filter(col(\"role\") == role)  \n</code></pre></p>"},{"location":"snowflake/objects/masking_policy/","title":"Masking Policy","text":"<p>Snowflake Docs - CREATE MASKING POLICY</p> <p>Snowflake Docs - ALTER MASKING POLICY</p>"},{"location":"snowflake/objects/masking_policy/#usage","title":"Usage","text":"<ul> <li>A masking policy is made up of 2 parts<ul> <li>YAML Configuration</li> <li>SQL code with the policy itself</li> </ul> </li> <li>All masking policies must live inside a [DATABASE]/[SCHEMA]/MASKING_POLICIES folder and contain both a .yml file and .sql file with the same name.</li> <li>Object name = name of the yml config file within [DATABASE]/[SCHEMA]/MASKING_POLICIES folder</li> </ul>"},{"location":"snowflake/objects/masking_policy/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>SIGNATURE</code> (List[{name: datatype}]) - Optional <code>RETURN_TYPE</code> (String) - Optional <code>EXEMPT_OTHER_POLICIES</code> (Bool) - Optional <ul><li>default = FALSE</li></ul> <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/masking_policy/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/masking_policy/#folder-structure","title":"Folder Structure","text":"<p>Configuration:   <code>snowflake/data/[database name]/[schema name]/MASKING_POLICIES/[policy name].yml</code></p> <p>Policy   <code>snowflake/data/[database name]/[schema name]/MASKING_POLICIES/[policy name].sql</code></p> <p>Example Structure</p> <p>snowflake/data/CONTROL/GOVERNANCE/MASKING_POLICIES/SENSITIVITY_STRING.yml</p> <p>snowflake/data/CONTROL/GOVERNANCE/MASKING_POLICIES/SENSITIVITY_STRING.sql</p> <p>snowflake/data/CONTROL/GOVERNANCE/MASKING_POLICIES/SENSITIVITY_ARRAY.yml</p> <p>snowflake/data/CONTROL/GOVERNANCE/MASKING_POLICIES/SENSITIVITY_ARRAY.sql</p> <p>This specifies the metadata for 2 masking policies named \"SENSITIVITY_STRING\" and \"SENSITIVITY_ARRAY\" within the CONTROL.GOVERNANCE schema, each with their own yml config file &amp; sql based on the policy name</p>"},{"location":"snowflake/objects/masking_policy/#samples","title":"Samples","text":""},{"location":"snowflake/objects/masking_policy/#basic","title":"Basic","text":"<p>Config <pre><code>SIGNATURE:\n- VAR1: VARCHAR\n- VAR2: INT\nRETURN_TYPE: VARCHAR\nEXEMPT_OTHER_POLICIES: false\nOWNER: INSTANCEADMIN\nCOMMENT: Masking policy associated with the sensitivity tag\nTAGS: \n- {{ref('CONTROL__GOVERNANCE__ENV')}}: {{env}}\nGRANTS: \n- {{role('SOME_ROLE')}}: APPLY\n</code></pre></p> <p>Code file (.py in this example) <pre><code>CASE     \n    WHEN current_role() IN ('DATA_ENGINEER') THEN VAL     \n    ELSE '***'   \nEND\n</code></pre></p> <p>With a deploy lock &amp; restricted deployment environments.  </p>"},{"location":"snowflake/objects/masking_policy/#config","title":"Config","text":"<pre><code>SIGNATURE:\n- VAR1: VARCHAR\n- VAR2: INT\nRETURN_TYPE: VARCHAR\nEXEMPT_OTHER_POLICIES: false\nOWNER: INSTANCEADMIN\nCOMMENT: Masking policy associated with the sensitivity tag\nTAGS: \n- {{ref('CONTROL__GOVERNANCE__ENV')}}: {{env}}\nGRANTS: \n- {{role('SOME_ROLE')}}: APPLY\nDEPLOY_LOCK: true\nDEPLOY_ENV:\n- PROD\n- TEST\n</code></pre> <p>Code file (.py in this example) <pre><code>CASE     \n    WHEN current_role() IN ('DATA_ENGINEER') THEN VAL     \n    ELSE '***'   \nEND\n</code></pre></p>"},{"location":"snowflake/objects/object/","title":"Object","text":"<p>Tables &amp; Views Snowflake Docs - ALTER TABLE</p> <p>Snowflake Docs - ALTER VIEW</p>"},{"location":"snowflake/objects/object/#usage","title":"Usage","text":"<ul> <li>Tables and views are grouped simply into \"objects\" as these can sometimes be interchangeable depending on the environment, or materialization.</li> <li>Currently only supported the meta data of an object, not the creation the object.</li> <li>The primary use case currently is for managing metadata such as tags and grants on objects created with other applications or via Snowflake procedures/scripts.</li> <li>All objects must live inside a [DATABASE]/[SCHEMA]/OBJECTS folder</li> <li>Object name = name of the yml config file within [DATABASE]/[SCHEMA]/OBJECTS folder</li> </ul>"},{"location":"snowflake/objects/object/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>RETENTION_TIME_IN_DAYS</code> (Int) - Optional <code>OBJECT_TYPE</code> (String) - Optional <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>CHANGE_TRACKING</code> (Bool) - Optional <code>ROW_ACCESS_POLICY</code> (dict) - Optional (see below for structure) <code>COLUMNS</code> (COLUMN) - Optional <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional"},{"location":"snowflake/objects/object/#row_access_policy","title":"ROW_ACCESS_POLICY","text":"Parameter Description <code>NAME</code> (String) - Optional <ul><li>Name of ROW ACCESS POLICY - use jinja REF to ensure dependencies during deployment</li></ul> <code>INPUT_COLUMNS</code> (LIST) - Optional <ul><li>List of input columns to row access policy as row access policy can access multiple columns as input</li></ul> <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/object/#column","title":"COLUMN","text":"Parameter Description <code>NAME</code> (String) - Optional <code>TAGS</code> ({KEY:VALUE}) - Optional <p>Used within the list of Columns to tag specific columns</p>"},{"location":"snowflake/objects/object/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/object/#folder-structure","title":"Folder Structure","text":"<p><code>snowflake/data/[database name]/[schema name]/OBJECTS/[object name].yml</code></p> <p>Example Structure</p> <p>snowflake/data/MY_DATABASE1/HR/OBJECTS/PEOPLE.yml</p> <p>snowflake/data/MY_DATABASE1/HR/OBJECTS/DEPARTMENT.yml</p> <p>This specifies the metadata for 2 objects named \"PEOPLE\" and \"DEPARTMENT\" within the MY_DATABASE1.HR schema, each with their own yml config file based on the object name</p>"},{"location":"snowflake/objects/object/#samples","title":"Samples","text":"<p>Basic <pre><code>COMMENT: This is the comment telling what this is all about\nOWNER: INSTANCEADMIN\nDATA_RETENTION_TIME_IN_DAYS: 1\nCHANGE_TRACKING: true\nCOLUMNS:\n- name: ID\n  tags:\n  - {{ref('CONTROL__GOVERNANCE__SENSITIVITY')}}: INTERNAL\n  - {{ref('CONTROL__GOVERNANCE__SEMANTIC')}}: IDENTIFIER\n- name: FIRST_NAME\n  tags:\n  - {{ref('CONTROL__GOVERNANCE__SENSITIVITY')}}: CONFIDENTIAL\n  - {{ref('CONTROL__GOVERNANCE__SEMANTIC')}}: NAME\nTAGS:\n- {{ref('CONTROL__GOVERNANCE__DOMAIN')}}: HR\nGRANTS:\n- {{role('SOME_ROLE')}}: SELECT, INSERT\n</code></pre></p> <p>With a deploy lock &amp; restricted deployment environments. <pre><code>COMMENT: This is the comment telling what this is all about\nOWNER: INSTANCEADMIN\nDATA_RETENTION_TIME_IN_DAYS: 1\nCHANGE_TRACKING: true\nCOLUMNS:\n- NAME: ID\n  TAGS:\n  - {{ref('CONTROL__GOVERNANCE__SENSITIVITY')}}: INTERNAL\n  - {{ref('CONTROL__GOVERNANCE__SEMANTIC')}}: IDENTIFIER\n- NAME: FIRST_NAME\n  TAGS:\n  - {{ref('CONTROL__GOVERNANCE__SENSITIVITY')}}: CONFIDENTIAL\n  - {{ref('CONTROL__GOVERNANCE__SEMANTIC')}}: NAME\nTAGS:\n- {{ref('CONTROL__GOVERNANCE__DOMAIN')}}: HR\nGRANTS:\n- {{role('SOME_ROLE')}}: SELECT, INSERT\nDEPLOY_LOCK: true\nDEPLOY_ENV:\n- PROD\n- TEST\n</code></pre></p>"},{"location":"snowflake/objects/procedure/","title":"Procedure","text":"<p>Snowflake Docs - CREATE PROCEDURE</p> <p>Snowflake Docs - ALTER PROCEDURE</p>"},{"location":"snowflake/objects/procedure/#usage","title":"Usage","text":"<ul> <li>A Procedure is made up of 2 parts<ul> <li>YAML Configuration</li> <li>Code with the policy itself (see next sections for supported languages and associated file extensiosn)</li> </ul> </li> <li>All masking policies must live inside a [DATABASE]/[SCHEMA]/PROCEDURES folder and contain both a .yml file and code file with the same name.</li> <li>Object name = name of the yml config file within [DATABASE]/[SCHEMA]/PROCEDURES folder</li> <li>In Snowflake, multiple procedures can share the same name with different signatures.  Therefore, the signature with associated data types (no input names, just data types) must be include in the file name to make the file unique.  See example sections below.</li> </ul>"},{"location":"snowflake/objects/procedure/#supported-languages","title":"Supported Languages","text":"Language File Extension <code>SQL</code> .sql <code>JAVASCRIPT</code> .js <code>PYTHON</code> .py"},{"location":"snowflake/objects/procedure/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>INPUT_ARGS</code> (List[{name: datatype}]) - Optional <code>IS_SECURE</code> (Bool) - Optional <code>RETURNS</code> (String) - Optional <code>LANGUAGE</code> (String) - Optional <ul><li>Valid Values = [SQL,JAVASCRIPT,PYTHON]</li></ul> <code>NULL_HANDLING</code> (String) - Optional  <ul><li>Valid Values = [CALLED ON NULL INPUT, RETURNS NULL ON NULL INPUT, STRICT]</li></ul> <code>EXECUTE_AS</code> (String) - Optional <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Python Only </p> <p>| <code>IMPORTS</code>         | (List[String]) - Optional | | <code>HANDLER</code>         | (String) - Optional | | <code>RUNTIME_VERSION</code>         | (String) - Optional | | <code>PACKAGES</code>         | (List[String]) - Optional |</p> <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/procedure/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/procedure/#folder-structure","title":"Folder Structure","text":"<p>Configuration:   <code>snowflake/data/[database name]/[schema name]/PROCEDURES/[procedure name].yml</code></p> <p>Code   <code>snowflake/data/[database name]/[schema name]/PROCEDURES/[procedure name].[extension]</code></p> <p>Example Structure</p> <p>snowflake/data/CONTROL/CODE/PROCEDURES/GET_FISCAL_YEARS().yml</p> <p>snowflake/data/CONTROL/CODE/PROCEDURES/GET_FISCAL_YEARS.sql</p> <p>snowflake/data/CONTROL/CODE/PROCEDURES/PY_PI(varchar,int).yml</p> <p>snowflake/data/CONTROL/CODE/PROCEDURES/PY_PI(varchar,int).py</p> <p>This specifies the metadata for a sql procedure named \"GET_FISCAL_YEARS\" with an empty signature and a python procedure \"PY_PI\" with a signature of (varchar,int).  Both within the CONTROL.CODE schema, each with their own yml config file &amp; code based on the procedure name.</p>"},{"location":"snowflake/objects/procedure/#samples","title":"Samples","text":"<p>Config <pre><code>INPUT_ARGS:\n- TABLENAME: VARCHAR\n- ROLE: VARCHAR\nRETURNS: TABLE (ID NUMBER, NAME VARCHAR, ROLE VARCHAR)\nLANGUAGE: PYTHON\nEXECUTE_AS: OWNER\nOWNER: INSTANCEADMIN\nCOMMENT: \nIS_SECURE: false\nIMPORTS: \nHANDLER: filter_by_role\nRUNTIME_VERSION: 3.8\nPACKAGES: \n- snowflake-snowpark-python\nTAGS: \n- {{ref('CONTROL__GOVERNANCE__ENV')}}: {{env}}\nGRANTS: \n- {{role('SOME_ROLE')}}: USAGE\n</code></pre></p> <p>Code file (.py in this example) <pre><code>from snowflake.snowpark.functions import col\n\ndef filter_by_role(session, table_name, role):\n   df = session.table(table_name)\n   return df.filter(col(\"role\") == role)  \n</code></pre></p>"},{"location":"snowflake/objects/role/","title":"Role","text":"<p>Snowflake Docs - CREATE ROLE</p> <p>Snowflake Docs - ALTER ROLE</p>"},{"location":"snowflake/objects/role/#usage","title":"Usage","text":"<ul> <li>Role name = file name of role yml config</li> </ul>"},{"location":"snowflake/objects/role/#limiations","title":"Limiations","text":"<ul> <li>Currently does not support the REMOVAL of child roles.  If a child role is removed from the list, the deployer will NOT automatically remove relationship in Snowflake.  Future roadmap item.</li> </ul>"},{"location":"snowflake/objects/role/#environment-config","title":"Environment Config","text":"<ul> <li>Use the ENV_ROLE_PREFIX in the environment config file to specify a prefix for ALL roles within an environment.</li> <li>If the role filename is INGEST.yml and the ENV_ROLE_PREFIX is \"PROD_\", the role name will compile to \"PROD_INGEST\"</li> <li>See Setup/Config for additional details &amp; examples</li> </ul>"},{"location":"snowflake/objects/role/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>CHILD_ROLES</code> (String) - Optional <ul><li>List of child roles that should be granted to this role.</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/role/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/role/#folder-structure","title":"Folder Structure","text":"<p><code>snowflake/instance/roles/[role name].yml</code></p> <p>Example Structure</p> <p>snowflake/instance/roles/ANALYST.yml</p> <p>snowflake/instance/roles/ADMIN.yml</p> <p>This creates 2 roles named \"ANALYST\" and \"ADMIN\" each with their own yml file.</p>"},{"location":"snowflake/objects/role/#samples","title":"Samples","text":"<p>Basic <pre><code>OWNER: INSTANCEADMIN\nCOMMENT: Test compute resources\nCHILD_ROLES: \n- {{role('CHILD_ROLE')}}\n- CUSTOMROLE\nTAGS:\n- {{ref('CONTROL__GOVERNANCE__ENV')}}: PROD\n</code></pre></p> <p>With a deploy lock &amp; restricted deployment environments. <pre><code>OWNER: INSTANCEADMIN\nCOMMENT: Test compute resources\nCHILD_ROLES: \n- {{role('CHILD_ROLE')}}\n- CUSTOMROLE\nTAGS:\n- {{ref('CONTROL__GOVERNANCE__ENV')}}: PROD\nDEPLOY_LOCK: true\nDEPLOY_ENV:\n- PROD\n- TEST\n</code></pre></p>"},{"location":"snowflake/objects/row_access_policy/","title":"Row Access Policy","text":"<p>Snowflake Docs - CREATE ROW ACCESS POLICY</p> <p>Snowflake Docs - ALTER ROW ACCESS POLICY</p>"},{"location":"snowflake/objects/row_access_policy/#usage","title":"Usage","text":"<ul> <li>A row access policy is made up of 2 parts<ul> <li>YAML Configuration</li> <li>SQL code with the policy itself</li> </ul> </li> <li>All row access policies must live inside a [DATABASE]/[SCHEMA]/ROW_ACCESS_POLICIES folder and contain both a .yml file and .sql file with the same name.</li> <li>Object name = name of the yml config file within [DATABASE]/[SCHEMA]/ROW_ACCESS_POLICIES folder</li> </ul>"},{"location":"snowflake/objects/row_access_policy/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>SIGNATURE</code> (List[{name: datatype}]) - Optional <code>RETURN_TYPE</code> (String) - Optional <code>EXEMPT_OTHER_POLICIES</code> (Bool) - Optional <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/row_access_policy/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/row_access_policy/#folder-structure","title":"Folder Structure","text":"<p>Configuration:   <code>snowflake/data/[database name]/[schema name]/ROW_ACCESS_POLICIES/[policy name].yml</code></p> <p>Policy   <code>snowflake/data/[database name]/[schema name]/ROW_ACCESS_POLICIES/[policy name].sql</code></p> <p>Example Structure</p> <p>snowflake/data/CONTROL/GOVERNANCE/ROW_ACCESS_POLICIES/SALES_POLICY.yml</p> <p>snowflake/data/CONTROL/GOVERNANCE/ROW_ACCESS_POLICIES/SALES_POLICY.sql</p> <p>snowflake/data/CONTROL/GOVERNANCE/ROW_ACCESS_POLICIES/PEOPLE_POLICY.yml</p> <p>snowflake/data/CONTROL/GOVERNANCE/ROW_ACCESS_POLICIES/PEOPLE_POLICY.sql</p> <p>This specifies the metadata for 2 row access policies named \"SALES_POLICY\" and \"PEOPLE_POLICY\" within the CONTROL.GOVERNANCE schema, each with their own yml config file &amp; sql based on the policy name</p>"},{"location":"snowflake/objects/row_access_policy/#samples","title":"Samples","text":"<p>Basic <pre><code>SIGNATURE:\n- VAR1: VARCHAR\n- VAR2: INT\nRETURN_TYPE: BOOLEAN\nEXEMPT_OTHER_POLICIES: false\nOWNER: INSTANCEADMIN\nCOMMENT: Row access policy associated for sales records based on department\nTAGS: \n- {{ref('CONTROL__GOVERNANCE__ENV')}}: {{env}}\nGRANTS: \n- {{role('SOME_ROLE')}}: APPLY\n</code></pre></p> <p>With a deploy lock &amp; restricted deployment environments. <pre><code>SIGNATURE:\n- VAR1: VARCHAR\n- VAR2: INT\nRETURN_TYPE: BOOLEAN\nEXEMPT_OTHER_POLICIES: false\nOWNER: INSTANCEADMIN\nCOMMENT: Row access policy associated for sales records based on department\nTAGS: \n- {{ref('CONTROL__GOVERNANCE__ENV')}}: {{env}}\nGRANTS: \n- {{role('SOME_ROLE')}}: APPLY\nDEPLOY_LOCK: true\nDEPLOY_ENV:\n- PROD\n- TEST\n</code></pre></p>"},{"location":"snowflake/objects/schema/","title":"Schema","text":"<p>Snowflake Docs - CREATE SCHEMA</p> <p>Snowflake Docs - ALTER SCHEMA</p>"},{"location":"snowflake/objects/schema/#usage","title":"Usage","text":"<ul> <li>Each folder within a Database folder represents a schema</li> <li>Schema name = folder name of schema</li> <li>Config file in \"schema.yml\" within schema name folder</li> </ul>"},{"location":"snowflake/objects/schema/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>DATA_RETENTION_TIME_IN_DAYS</code> (Int) - Optional <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/schema/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/schema/#folder-structure","title":"Folder Structure","text":"<p><code>snowflake/data/[database name]/[schema name]/schema.yml</code></p> <p>Example Structure</p> <p>snowflake/data/MY_DATABASE1/HR/schema.yml</p> <p>snowflake/data/MY_DATABASE1/ACCOUNTING/schema.yml</p> <p>This creates 2 schemas named \"HR\" and \"ACCOUNT\" within database \"MY_DATABASE1\", each with their own schema.yml file within their respected folder</p>"},{"location":"snowflake/objects/schema/#samples","title":"Samples","text":"<p>Basic <pre><code>COMMENT: This is the comment on a schema\nOWNER: INSTANCEADMIN\nDATA_RETENTION_TIME_IN_DAYS: 1\nTAGS:\n- {{ref('CONTROL__GOVERNANCE__ENV')}}: PROD\n- {{ref('CONTROL__GOVERNANCE__ZONE')}}: ANALYTICS\nGRANTS:\n- {{role('SOME_ROLE')}}: USAGE\n</code></pre></p> <p>With a deploy lock &amp; restricted deployment environments. <pre><code>COMMENT: {{var_from_env_config}}\nOWNER: INSTANCEADMIN\nTAGS:\n- {{ref('CONTROL__GOVERNANCE__ENV')}}: PROD\n- {{ref('CONTROL__GOVERNANCE__ZONE')}}: ANALYTICS\nGRANTS:\n- {{role('SOME_ROLE')}}: USAGE\nDEPLOY_LOCK: true\nDEPLOY_ENV:\n- PROD\n- TEST\n</code></pre></p>"},{"location":"snowflake/objects/tag/","title":"Tag","text":"<p>Tables &amp; Views Snowflake Docs - CREATE TAG</p> <p>Snowflake Docs - ALTER TAG</p>"},{"location":"snowflake/objects/tag/#usage","title":"Usage","text":"<ul> <li>Used to create and manage tags within a schema</li> <li>All objects must live inside a [DATABASE]/[SCHEMA]/TAGS folder</li> <li>Tag name = name of the yml config file within [DATABASE]/[SCHEMA]/TAGS folder</li> </ul>"},{"location":"snowflake/objects/tag/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>ALLOWED_VALUES</code> (List[string]) - Optional <code>MASKING_POLICIES</code> (List[string]) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/tag/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/tag/#folder-structure","title":"Folder Structure","text":"<p><code>snowflake/data/[database name]/[schema name]/TAGS/[tag name].yml</code></p> <p>Example Structure</p> <p>snowflake/data/CONTROL/GOVERNANACE/TAGS/SENSITIVITY.yml</p> <p>snowflake/data/CONTROL/GOVERNANACE/TAGS/SEMANTIC.yml</p> <p>This specifies the metadata for 2 tags named \"SENSITIVITY\" and \"SEMANTIC\" within the CONTROL.GOVERNANCE schema, each with their own yml config file based on the tag name</p>"},{"location":"snowflake/objects/tag/#samples","title":"Samples","text":"<p>Basic <pre><code>COMMENT: This is the comment telling what this is all about\nOWNER: INSTANCEADMIN\nALLOWED_VALUES:\n- NEW\n- PUBLIC\n- INTERNAL\n- CONFIDENTIAL\n- RESTRICTED\nMASKING_POLICIES:\n- {{ref('CONTROL__GOVERNANCE__SEMANTIC')}}\n</code></pre></p> <p>With a deploy lock &amp; restricted deployment environments. <pre><code>COMMENT: This is the comment telling what this is all about\nOWNER: INSTANCEADMIN\nALLOWED_VALUES:\n- NEW\n- PUBLIC\n- INTERNAL\n- CONFIDENTIAL\n- RESTRICTED\nMASKING_POLICIES:\n- {{ref('CONTROL__GOVERNANCE__SEMANTIC')}}\nDEPLOY_LOCK: true\nDEPLOY_ENV:\n- PROD\n- TEST\n</code></pre></p>"},{"location":"snowflake/objects/tag/#reference-in-other-config","title":"Reference in other config","text":"<p>Other objects may need to reference this object and can do so using jinja references.</p> <p>Reference Structure:  {{ref('[database name][schema name][tag name]')}}</p> <p>Example - reference the tag named SENSITIVITY in the CONTROL.GOVERNANCE schema: <pre><code>TAGS:\n- {{ref('CONTROL__GOVERNANCE__SENSITIVITY')}}: HR\n</code></pre></p>"},{"location":"snowflake/objects/task/","title":"Task","text":"<p>Snowflake Docs - CREATE TASK</p> <p>Snowflake Docs - ALTER TASK</p>"},{"location":"snowflake/objects/task/#usage","title":"Usage","text":"<ul> <li>A Task is made up of 2 parts<ul> <li>YAML Configuration</li> <li>SQL code with the task execution code</li> </ul> </li> <li>All tasks must live inside a [DATABASE]/[SCHEMA]/TASKS folder and contain both a .yml file and .sql file with the same name.</li> <li>Object name = name of the yml config file within [DATABASE]/[SCHEMA]/TASKS folder</li> </ul>"},{"location":"snowflake/objects/task/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>WAREHOUSE</code> (String) - Optional <code>USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE</code> (String) - <ul><li>Valid Values = [XSMALL, SMALL, MEDIUM, LARGE, XLARGE, XXLARGE, XXXLARGE, X4LARGE, X5LARGE, X6LARGE]</li><li>The initial warehouse size is currently not available to pull in via the reverse engineering (not visible in Snowflake SHOW/DESC).  It is assumed that if the WAREHOUSE is null, that this initial value is XSMALL.  This is only relavent for the initial creation of the task, else the \"serverless\" handles all compute.</li></ul> <code>SCHEDULE</code> (String) - Optional <code>ALLOW_OVERLAPPING_EXECUTION</code> (Bool) - Optional <code>PREDECESSORS</code> (List[String]) - Optional <code>ERROR_INTEGRATION</code> (String) - Optional <code>CONDITION</code> (String) - Optional <code>USER_TASK_TIMEOUT_MS</code> (Int) - Optional <code>SUSPEND_TASK_AFTER_NUM_FAILURES</code> (Int) - Optional <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <code>ENABLED</code> (Bool) - Optional <ul><li>If enabled, deployer runs a \"RESUME\" command to start task.  If disable, deployer runs a \"SUSPEND\" commend to pause task</li></ul> <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/task/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/task/#folder-structure","title":"Folder Structure","text":"<p>Configuration:   <code>snowflake/data/[database name]/[schema name]/TASKS/[task name].yml</code></p> <p>Policy   <code>snowflake/data/[database name]/[schema name]/TASKS/[task name].sql</code></p> <p>Example Structure</p> <p>snowflake/data/CONTROL/AUTOMATION/TASKS/RUN_MONTHLY_PROCESS.yml</p> <p>snowflake/data/CONTROL/AUTOMATION/TASKS/RUN_MONTHLY_PROCESS.sql</p> <p>snowflake/data/CONTROL/AUTOMATION/TASKS/TAG_COLUMNS.yml</p> <p>snowflake/data/CONTROL/AUTOMATION/TASKS/TAG_COLUMNS.sql</p> <p>This specifies the metadata for 2 tasks named \"RUN_MONTHLY_PROCESS\" and \"TAG_COLUMNS\" within the CONTROL.AUTOMATION schema, each with their own yml config file &amp; sql based on the task name</p>"},{"location":"snowflake/objects/task/#samples","title":"Samples","text":"<p>Config File - Serverless Task <pre><code>WAREHOUSE: \nUSER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE: XSMALL\nSCHEDULE: USING CRON  0 * * * * America/Los_Angeles\nALLOW_OVERLAPPING_EXECUTION: true\nPREDECESSORS: \n- {{ref('CODE__AUTOMATION__SOME_OTHER_TASK')}}\n- {{ref('CODE__AUTOMATION__ANOTHER_TASK')}}\nERROR_INTEGRATION: \nOWNER: INSTANCEADMIN\nCOMMENT: This is a demo automation task\nENABLED: true\nCONDITION: \nUSER_TASK_TIMEOUT_MS: 600\nSUSPEND_TASK_AFTER_NUM_FAILURES: 5\nTAGS: \n- {{ref('CONTROL__GOVERNANCE__ENV')}}: {{env}}\nGRANTS: \n- {{role('SOME_ROLE')}}:  MONITOR, OPERATE\n</code></pre></p> <p>Code file with .sql extension <pre><code>BEGIN\n  ALTER SESSION SET TIMESTAMP_OUTPUT_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF';\n  SELECT CURRENT_TIMESTAMP;\nEND\n</code></pre></p>"},{"location":"snowflake/objects/warehouse/","title":"Warehouse","text":"<p>Snowflake Docs - CREATE WAREHOUSE</p> <p>Snowflake Docs - ALTER WAREHOUSE</p>"},{"location":"snowflake/objects/warehouse/#usage","title":"Usage","text":"<ul> <li>Warehouse name = file name of warehouse yml config</li> </ul>"},{"location":"snowflake/objects/warehouse/#environment-config","title":"Environment Config","text":"<ul> <li>Use the ENV_WAREHOUSE_PREFIX in the environment config file to specify a prefix for ALL warehouses within an environment.</li> <li>If the warehouse filename is INGEST_WH.yml and the ENV_WAREHOUSE_PREFIX is \"PROD_\", the warehouse name will compile to \"PROD_INGEST_WH\"</li> <li>See Setup/Config for additional details &amp; examples</li> </ul>"},{"location":"snowflake/objects/warehouse/#snowflake-attributes","title":"Snowflake Attributes","text":"Parameter Description <code>WAREHOUSE_TYPE</code> (String) - Optional <ul><li>Valid Values = [STANDARD, SNOWPARK-OPTIMIZED]</li></ul> <code>WAREHOUSE_SIZE</code> (String) - Optional <ul><li>Valid Values = [XSMALL, SMALL, MEDIUM, LARGE, XLARGE, XXLARGE, XXXLARGE, X4LARGE, X5LARGE, X6LARGE]</li></ul> <code>MIN_CLUSTER_COUNT</code> (Int) - Optional <code>MAX_CLUSTER_COUNT</code> (Int) - Optional <code>SCALING_POLICY</code> (String) - Optional <ul><li>Valid Values = [STANDARD, ECONOMY]</li></ul> <code>AUTO_SUSPEND</code> (Int) - Optional <code>QUERY_ACCELERATION_MAX_SCALE_FACTOR</code> (Int) - Optional <code>AUTO_RESUME</code> (Bool) - Optional <code>ENABLE_QUERY_ACCELERATION</code> (Bool) - Optional <code>COMMENT</code> (String) - Optional <code>OWNER</code> (String) - Optional <ul><li>If HANDLE_OWNERSHIP=ERROR, be careful not to set OWNER to a role that the deployer does not have access to as it will no longer have access to manage</li></ul> <code>TAGS</code> ({KEY:VALUE}) - Optional <code>GRANTS</code> ({KEY:VALUE}) - Optional <p>Optional Parameter Defaults - if omitted, Snowflake defaults for parameters are used, just like creating an object manually.</p>"},{"location":"snowflake/objects/warehouse/#deployment-attributes","title":"Deployment attributes","text":"Parameter Description <code>DEPLOY_ENV</code> (List) - Optional <ul><li>Default = []</li><li>List of the deployment environments to deploy to</li><li>Deployment environment set in the environment config yaml using the DEPLOY_ENV parameter.  See Setup/Config for docs.</li><li>When empty or not included, deployed to all environments</li></ul> <code>DEPLOY_LOCK</code> (Bool) - Optional <ul><li>Default = False</li><li>Locks the config file to being over written by reverse engineer process.</li><li>Use if source code should always be source of truth and any changes pulled from database should be ignored</li></ul>"},{"location":"snowflake/objects/warehouse/#folder-structure","title":"Folder Structure","text":"<p><code>snowflake/instance/warehouses/[warehouse name].yml</code></p> <p>Example Structure</p> <p>snowflake/instance/warehouses/INGEST_WH.yml</p> <p>snowflake/instance/warehouses/AD_HOC_WH.yml</p> <p>This creates 2 warehouses named \"INGEST_WH\" and \"AD_HOC_WH\" each with their own yml file.</p>"},{"location":"snowflake/objects/warehouse/#samples","title":"Samples","text":"<p>Basic <pre><code>WAREHOUSE_TYPE: STANDARD\nWAREHOUSE_SIZE: XSMALL\nMIN_CLUSTER_COUNT: 1\nMAX_CLUSTER_COUNT: 1\nSCALING_POLICY: ECONOMY\nAUTO_SUSPEND: 10\nAUTO_RESUME: true\nOWNER: INSTANCEADMIN\nCOMMENT: Test compute resources\nENABLE_QUERY_ACCELERATION: false\nQUERY_ACCELERATION_MAX_SCALE_FACTOR: 8\nTAGS:\n- {{ref('CONTROL__GOVERNANCE__ENV')}}: PROD\nGRANTS:\n- {{role('SOME_ROLE')}}: USAGE\n</code></pre></p> <p>With a deploy lock &amp; restricted deployment environments. <pre><code>WAREHOUSE_TYPE: STANDARD\nWAREHOUSE_SIZE: XSMALL\nMIN_CLUSTER_COUNT: 1\nMAX_CLUSTER_COUNT: 1\nSCALING_POLICY: ECONOMY\nAUTO_SUSPEND: 10\nAUTO_RESUME: true\nOWNER: INSTANCEADMIN\nCOMMENT: Test compute resources\nENABLE_QUERY_ACCELERATION: false\nQUERY_ACCELERATION_MAX_SCALE_FACTOR: 8\nTAGS:\n- {{ref('CONTROL__GOVERNANCE__ENV')}}: PROD\nGRANTS:\n- {{role('SOME_ROLE')}}: USAGE\nDEPLOY_LOCK: true\nDEPLOY_ENV:\n- PROD\n- TEST\n</code></pre></p>"}]}